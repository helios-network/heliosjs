syntax = "proto3";
package helios.chronos.v1;

import "cosmos/msg/v1/msg.proto";

option go_package = "helios-core/helios-chain/x/chronos/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc ScheduleEVMCall(MsgScheduleEVMCall) returns (MsgScheduleEVMCallResponse);
  rpc ModifyScheduledEVMCall(MsgModifyScheduledEVMCall) returns (MsgModifyScheduledEVMCallResponse);
  rpc CancelScheduledEVMCall(MsgCancelScheduledEVMCall) returns (MsgCancelScheduledEVMCallResponse);
}

message MsgScheduleEVMCall {
  option (cosmos.msg.v1.signer) = "sender";

  string owner_address = 1; // User wallet scheduling the call
  string contract_address = 2; // Target EVM smart contract address
  string abi_json = 3; // Contract ABI (JSON)
  string method_name = 4; // Method to call
  repeated string params = 5; // Method parameters serialized as strings
  uint64 frequency = 6; // Execution frequency in blocks
  uint64 expiration_block = 7; // Optional expiration block height
  uint64 gas_limit = 8; // Maximum gas allowed for execution
  string sender = 9; // Add this field for the Cosmos SDK signer
}

message MsgScheduleEVMCallResponse {
  uint64 schedule_id = 1;
}

message MsgModifyScheduledEVMCall {
  uint64 schedule_id = 1;
  string owner_address = 2;
  uint64 new_frequency = 3;
  repeated string new_params = 4;
  uint64 new_expiration_block = 5;
  uint64 new_gas_limit = 6; // New maximum gas allowed
}

message MsgModifyScheduledEVMCallResponse {
  bool success = 1;
}

message MsgCancelScheduledEVMCall {
  string owner_address = 1;
  uint64 schedule_id = 2;
}

message MsgCancelScheduledEVMCallResponse {
  bool success = 1;
}

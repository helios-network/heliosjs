syntax = "proto3";
package helios.chronos.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "helios/chronos/v1/params.proto";
import "helios/chronos/v1/schedule.proto";

option go_package = "helios-core/helios-chain/x/chronos/types";

service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/helios/chronos/params";
  }

  rpc Schedule(QueryGetScheduleRequest) returns (QueryGetScheduleResponse) {
    option (google.api.http).get = "/helios/chronos/schedule/{id}";
  }

  rpc Schedules(QuerySchedulesRequest) returns (QuerySchedulesResponse) {
    option (google.api.http).get = "/helios/chronos/schedules";
  }

  rpc ScheduledCallsByOwner(QueryScheduledCallsByOwnerRequest) returns (QueryScheduledCallsByOwnerResponse) {
    option (google.api.http).get = "/helios/chronos/schedules/owner/{owner_address}";
  }
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetScheduleRequest {
  uint64 id = 1;
}

message QueryGetScheduleResponse {
  Schedule schedule = 1 [(gogoproto.nullable) = false];
}

message QuerySchedulesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySchedulesResponse {
  repeated Schedule schedules = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryScheduledCallsByOwnerRequest {
  string owner_address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryScheduledCallsByOwnerResponse {
  repeated Schedule schedules = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: helios/chronos/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../cosmos/msg/v1/msg";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace helios.chronos.v1 {
    export class MsgScheduleEVMCall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: string;
            contract_address?: string;
            abi_json?: string;
            method_name?: string;
            params?: string[];
            frequency?: number;
            expiration_block?: number;
            gas_limit?: number;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("abi_json" in data && data.abi_json != undefined) {
                    this.abi_json = data.abi_json;
                }
                if ("method_name" in data && data.method_name != undefined) {
                    this.method_name = data.method_name;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("frequency" in data && data.frequency != undefined) {
                    this.frequency = data.frequency;
                }
                if ("expiration_block" in data && data.expiration_block != undefined) {
                    this.expiration_block = data.expiration_block;
                }
                if ("gas_limit" in data && data.gas_limit != undefined) {
                    this.gas_limit = data.gas_limit;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get abi_json() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set abi_json(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get method_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set method_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get params() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set params(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get frequency() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set frequency(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expiration_block() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expiration_block(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get gas_limit() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set gas_limit(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            owner_address?: string;
            contract_address?: string;
            abi_json?: string;
            method_name?: string;
            params?: string[];
            frequency?: number;
            expiration_block?: number;
            gas_limit?: number;
            sender?: string;
        }): MsgScheduleEVMCall {
            const message = new MsgScheduleEVMCall({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.abi_json != null) {
                message.abi_json = data.abi_json;
            }
            if (data.method_name != null) {
                message.method_name = data.method_name;
            }
            if (data.params != null) {
                message.params = data.params;
            }
            if (data.frequency != null) {
                message.frequency = data.frequency;
            }
            if (data.expiration_block != null) {
                message.expiration_block = data.expiration_block;
            }
            if (data.gas_limit != null) {
                message.gas_limit = data.gas_limit;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: string;
                contract_address?: string;
                abi_json?: string;
                method_name?: string;
                params?: string[];
                frequency?: number;
                expiration_block?: number;
                gas_limit?: number;
                sender?: string;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.abi_json != null) {
                data.abi_json = this.abi_json;
            }
            if (this.method_name != null) {
                data.method_name = this.method_name;
            }
            if (this.params != null) {
                data.params = this.params;
            }
            if (this.frequency != null) {
                data.frequency = this.frequency;
            }
            if (this.expiration_block != null) {
                data.expiration_block = this.expiration_block;
            }
            if (this.gas_limit != null) {
                data.gas_limit = this.gas_limit;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeString(1, this.owner_address);
            if (this.contract_address.length)
                writer.writeString(2, this.contract_address);
            if (this.abi_json.length)
                writer.writeString(3, this.abi_json);
            if (this.method_name.length)
                writer.writeString(4, this.method_name);
            if (this.params.length)
                writer.writeRepeatedString(5, this.params);
            if (this.frequency != 0)
                writer.writeUint64(6, this.frequency);
            if (this.expiration_block != 0)
                writer.writeUint64(7, this.expiration_block);
            if (this.gas_limit != 0)
                writer.writeUint64(8, this.gas_limit);
            if (this.sender.length)
                writer.writeString(9, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgScheduleEVMCall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgScheduleEVMCall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readString();
                        break;
                    case 2:
                        message.contract_address = reader.readString();
                        break;
                    case 3:
                        message.abi_json = reader.readString();
                        break;
                    case 4:
                        message.method_name = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.frequency = reader.readUint64();
                        break;
                    case 7:
                        message.expiration_block = reader.readUint64();
                        break;
                    case 8:
                        message.gas_limit = reader.readUint64();
                        break;
                    case 9:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgScheduleEVMCall {
            return MsgScheduleEVMCall.deserialize(bytes);
        }
    }
    export class MsgScheduleEVMCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schedule_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
            }
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set schedule_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            schedule_id?: number;
        }): MsgScheduleEVMCallResponse {
            const message = new MsgScheduleEVMCallResponse({});
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_id?: number;
            } = {};
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_id != 0)
                writer.writeUint64(1, this.schedule_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgScheduleEVMCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgScheduleEVMCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgScheduleEVMCallResponse {
            return MsgScheduleEVMCallResponse.deserialize(bytes);
        }
    }
    export class MsgModifyScheduledEVMCall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schedule_id?: number;
            owner_address?: string;
            new_frequency?: number;
            new_params?: string[];
            new_expiration_block?: number;
            new_gas_limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("new_frequency" in data && data.new_frequency != undefined) {
                    this.new_frequency = data.new_frequency;
                }
                if ("new_params" in data && data.new_params != undefined) {
                    this.new_params = data.new_params;
                }
                if ("new_expiration_block" in data && data.new_expiration_block != undefined) {
                    this.new_expiration_block = data.new_expiration_block;
                }
                if ("new_gas_limit" in data && data.new_gas_limit != undefined) {
                    this.new_gas_limit = data.new_gas_limit;
                }
            }
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set schedule_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_frequency() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set new_frequency(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get new_params() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set new_params(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get new_expiration_block() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set new_expiration_block(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get new_gas_limit() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set new_gas_limit(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            schedule_id?: number;
            owner_address?: string;
            new_frequency?: number;
            new_params?: string[];
            new_expiration_block?: number;
            new_gas_limit?: number;
        }): MsgModifyScheduledEVMCall {
            const message = new MsgModifyScheduledEVMCall({});
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.new_frequency != null) {
                message.new_frequency = data.new_frequency;
            }
            if (data.new_params != null) {
                message.new_params = data.new_params;
            }
            if (data.new_expiration_block != null) {
                message.new_expiration_block = data.new_expiration_block;
            }
            if (data.new_gas_limit != null) {
                message.new_gas_limit = data.new_gas_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                schedule_id?: number;
                owner_address?: string;
                new_frequency?: number;
                new_params?: string[];
                new_expiration_block?: number;
                new_gas_limit?: number;
            } = {};
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.new_frequency != null) {
                data.new_frequency = this.new_frequency;
            }
            if (this.new_params != null) {
                data.new_params = this.new_params;
            }
            if (this.new_expiration_block != null) {
                data.new_expiration_block = this.new_expiration_block;
            }
            if (this.new_gas_limit != null) {
                data.new_gas_limit = this.new_gas_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule_id != 0)
                writer.writeUint64(1, this.schedule_id);
            if (this.owner_address.length)
                writer.writeString(2, this.owner_address);
            if (this.new_frequency != 0)
                writer.writeUint64(3, this.new_frequency);
            if (this.new_params.length)
                writer.writeRepeatedString(4, this.new_params);
            if (this.new_expiration_block != 0)
                writer.writeUint64(5, this.new_expiration_block);
            if (this.new_gas_limit != 0)
                writer.writeUint64(6, this.new_gas_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgModifyScheduledEVMCall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgModifyScheduledEVMCall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule_id = reader.readUint64();
                        break;
                    case 2:
                        message.owner_address = reader.readString();
                        break;
                    case 3:
                        message.new_frequency = reader.readUint64();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.new_expiration_block = reader.readUint64();
                        break;
                    case 6:
                        message.new_gas_limit = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgModifyScheduledEVMCall {
            return MsgModifyScheduledEVMCall.deserialize(bytes);
        }
    }
    export class MsgModifyScheduledEVMCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): MsgModifyScheduledEVMCallResponse {
            const message = new MsgModifyScheduledEVMCallResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgModifyScheduledEVMCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgModifyScheduledEVMCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgModifyScheduledEVMCallResponse {
            return MsgModifyScheduledEVMCallResponse.deserialize(bytes);
        }
    }
    export class MsgCancelScheduledEVMCall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner_address?: string;
            schedule_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("schedule_id" in data && data.schedule_id != undefined) {
                    this.schedule_id = data.schedule_id;
                }
            }
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set schedule_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            owner_address?: string;
            schedule_id?: number;
        }): MsgCancelScheduledEVMCall {
            const message = new MsgCancelScheduledEVMCall({});
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.schedule_id != null) {
                message.schedule_id = data.schedule_id;
            }
            return message;
        }
        toObject() {
            const data: {
                owner_address?: string;
                schedule_id?: number;
            } = {};
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.schedule_id != null) {
                data.schedule_id = this.schedule_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner_address.length)
                writer.writeString(1, this.owner_address);
            if (this.schedule_id != 0)
                writer.writeUint64(2, this.schedule_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelScheduledEVMCall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelScheduledEVMCall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner_address = reader.readString();
                        break;
                    case 2:
                        message.schedule_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelScheduledEVMCall {
            return MsgCancelScheduledEVMCall.deserialize(bytes);
        }
    }
    export class MsgCancelScheduledEVMCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): MsgCancelScheduledEVMCallResponse {
            const message = new MsgCancelScheduledEVMCallResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelScheduledEVMCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelScheduledEVMCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelScheduledEVMCallResponse {
            return MsgCancelScheduledEVMCallResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            ScheduleEVMCall: {
                path: "/helios.chronos.v1.Msg/ScheduleEVMCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgScheduleEVMCall) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgScheduleEVMCall.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgScheduleEVMCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgScheduleEVMCallResponse.deserialize(new Uint8Array(bytes))
            },
            ModifyScheduledEVMCall: {
                path: "/helios.chronos.v1.Msg/ModifyScheduledEVMCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgModifyScheduledEVMCall) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgModifyScheduledEVMCall.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgModifyScheduledEVMCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgModifyScheduledEVMCallResponse.deserialize(new Uint8Array(bytes))
            },
            CancelScheduledEVMCall: {
                path: "/helios.chronos.v1.Msg/CancelScheduledEVMCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCancelScheduledEVMCall) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCancelScheduledEVMCall.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCancelScheduledEVMCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCancelScheduledEVMCallResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ScheduleEVMCall(call: grpc_1.ServerUnaryCall<MsgScheduleEVMCall, MsgScheduleEVMCallResponse>, callback: grpc_1.sendUnaryData<MsgScheduleEVMCallResponse>): void;
        abstract ModifyScheduledEVMCall(call: grpc_1.ServerUnaryCall<MsgModifyScheduledEVMCall, MsgModifyScheduledEVMCallResponse>, callback: grpc_1.sendUnaryData<MsgModifyScheduledEVMCallResponse>): void;
        abstract CancelScheduledEVMCall(call: grpc_1.ServerUnaryCall<MsgCancelScheduledEVMCall, MsgCancelScheduledEVMCallResponse>, callback: grpc_1.sendUnaryData<MsgCancelScheduledEVMCallResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ScheduleEVMCall: GrpcUnaryServiceInterface<MsgScheduleEVMCall, MsgScheduleEVMCallResponse> = (message: MsgScheduleEVMCall, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgScheduleEVMCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgScheduleEVMCallResponse>, callback?: grpc_1.requestCallback<MsgScheduleEVMCallResponse>): grpc_1.ClientUnaryCall => {
            return super.ScheduleEVMCall(message, metadata, options, callback);
        };
        ModifyScheduledEVMCall: GrpcUnaryServiceInterface<MsgModifyScheduledEVMCall, MsgModifyScheduledEVMCallResponse> = (message: MsgModifyScheduledEVMCall, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgModifyScheduledEVMCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgModifyScheduledEVMCallResponse>, callback?: grpc_1.requestCallback<MsgModifyScheduledEVMCallResponse>): grpc_1.ClientUnaryCall => {
            return super.ModifyScheduledEVMCall(message, metadata, options, callback);
        };
        CancelScheduledEVMCall: GrpcUnaryServiceInterface<MsgCancelScheduledEVMCall, MsgCancelScheduledEVMCallResponse> = (message: MsgCancelScheduledEVMCall, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCancelScheduledEVMCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCancelScheduledEVMCallResponse>, callback?: grpc_1.requestCallback<MsgCancelScheduledEVMCallResponse>): grpc_1.ClientUnaryCall => {
            return super.CancelScheduledEVMCall(message, metadata, options, callback);
        };
    }
}

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: helios/chronos/v1/schedule.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace helios.chronos.v1 {
    export enum ExecutionStage {
        EXECUTION_STAGE_END_BLOCKER = 0,
        EXECUTION_STAGE_BEGIN_BLOCKER = 1
    }
    export class Schedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            owner_address?: string;
            contract_address?: string;
            abi_json?: string;
            method_name?: string;
            params?: string[];
            frequency?: number;
            next_execution_block?: number;
            expiration_block?: number;
            execution_stage?: ExecutionStage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("abi_json" in data && data.abi_json != undefined) {
                    this.abi_json = data.abi_json;
                }
                if ("method_name" in data && data.method_name != undefined) {
                    this.method_name = data.method_name;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("frequency" in data && data.frequency != undefined) {
                    this.frequency = data.frequency;
                }
                if ("next_execution_block" in data && data.next_execution_block != undefined) {
                    this.next_execution_block = data.next_execution_block;
                }
                if ("expiration_block" in data && data.expiration_block != undefined) {
                    this.expiration_block = data.expiration_block;
                }
                if ("execution_stage" in data && data.execution_stage != undefined) {
                    this.execution_stage = data.execution_stage;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get abi_json() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set abi_json(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get method_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set method_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get params() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set params(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get frequency() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set frequency(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get next_execution_block() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set next_execution_block(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get expiration_block() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set expiration_block(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get execution_stage() {
            return pb_1.Message.getFieldWithDefault(this, 10, ExecutionStage.EXECUTION_STAGE_END_BLOCKER) as ExecutionStage;
        }
        set execution_stage(value: ExecutionStage) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: number;
            owner_address?: string;
            contract_address?: string;
            abi_json?: string;
            method_name?: string;
            params?: string[];
            frequency?: number;
            next_execution_block?: number;
            expiration_block?: number;
            execution_stage?: ExecutionStage;
        }): Schedule {
            const message = new Schedule({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.abi_json != null) {
                message.abi_json = data.abi_json;
            }
            if (data.method_name != null) {
                message.method_name = data.method_name;
            }
            if (data.params != null) {
                message.params = data.params;
            }
            if (data.frequency != null) {
                message.frequency = data.frequency;
            }
            if (data.next_execution_block != null) {
                message.next_execution_block = data.next_execution_block;
            }
            if (data.expiration_block != null) {
                message.expiration_block = data.expiration_block;
            }
            if (data.execution_stage != null) {
                message.execution_stage = data.execution_stage;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                owner_address?: string;
                contract_address?: string;
                abi_json?: string;
                method_name?: string;
                params?: string[];
                frequency?: number;
                next_execution_block?: number;
                expiration_block?: number;
                execution_stage?: ExecutionStage;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.abi_json != null) {
                data.abi_json = this.abi_json;
            }
            if (this.method_name != null) {
                data.method_name = this.method_name;
            }
            if (this.params != null) {
                data.params = this.params;
            }
            if (this.frequency != null) {
                data.frequency = this.frequency;
            }
            if (this.next_execution_block != null) {
                data.next_execution_block = this.next_execution_block;
            }
            if (this.expiration_block != null) {
                data.expiration_block = this.expiration_block;
            }
            if (this.execution_stage != null) {
                data.execution_stage = this.execution_stage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.owner_address.length)
                writer.writeString(2, this.owner_address);
            if (this.contract_address.length)
                writer.writeString(3, this.contract_address);
            if (this.abi_json.length)
                writer.writeString(4, this.abi_json);
            if (this.method_name.length)
                writer.writeString(5, this.method_name);
            if (this.params.length)
                writer.writeRepeatedString(6, this.params);
            if (this.frequency != 0)
                writer.writeUint64(7, this.frequency);
            if (this.next_execution_block != 0)
                writer.writeUint64(8, this.next_execution_block);
            if (this.expiration_block != 0)
                writer.writeUint64(9, this.expiration_block);
            if (this.execution_stage != ExecutionStage.EXECUTION_STAGE_END_BLOCKER)
                writer.writeEnum(10, this.execution_stage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Schedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Schedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.owner_address = reader.readString();
                        break;
                    case 3:
                        message.contract_address = reader.readString();
                        break;
                    case 4:
                        message.abi_json = reader.readString();
                        break;
                    case 5:
                        message.method_name = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.frequency = reader.readUint64();
                        break;
                    case 8:
                        message.next_execution_block = reader.readUint64();
                        break;
                    case 9:
                        message.expiration_block = reader.readUint64();
                        break;
                    case 10:
                        message.execution_stage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Schedule {
            return Schedule.deserialize(bytes);
        }
    }
}

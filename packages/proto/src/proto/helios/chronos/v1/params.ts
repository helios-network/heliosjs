/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: helios/chronos/v1/params.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace helios.chronos.v1 {
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            max_scheduled_calls_per_wallet?: number;
            minimum_gas_fee_multiplier?: string;
            global_max_gas_price?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("max_scheduled_calls_per_wallet" in data && data.max_scheduled_calls_per_wallet != undefined) {
                    this.max_scheduled_calls_per_wallet = data.max_scheduled_calls_per_wallet;
                }
                if ("minimum_gas_fee_multiplier" in data && data.minimum_gas_fee_multiplier != undefined) {
                    this.minimum_gas_fee_multiplier = data.minimum_gas_fee_multiplier;
                }
                if ("global_max_gas_price" in data && data.global_max_gas_price != undefined) {
                    this.global_max_gas_price = data.global_max_gas_price;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_scheduled_calls_per_wallet() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_scheduled_calls_per_wallet(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get minimum_gas_fee_multiplier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set minimum_gas_fee_multiplier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get global_max_gas_price() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set global_max_gas_price(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            limit?: number;
            max_scheduled_calls_per_wallet?: number;
            minimum_gas_fee_multiplier?: string;
            global_max_gas_price?: string;
        }): Params {
            const message = new Params({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.max_scheduled_calls_per_wallet != null) {
                message.max_scheduled_calls_per_wallet = data.max_scheduled_calls_per_wallet;
            }
            if (data.minimum_gas_fee_multiplier != null) {
                message.minimum_gas_fee_multiplier = data.minimum_gas_fee_multiplier;
            }
            if (data.global_max_gas_price != null) {
                message.global_max_gas_price = data.global_max_gas_price;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                max_scheduled_calls_per_wallet?: number;
                minimum_gas_fee_multiplier?: string;
                global_max_gas_price?: string;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.max_scheduled_calls_per_wallet != null) {
                data.max_scheduled_calls_per_wallet = this.max_scheduled_calls_per_wallet;
            }
            if (this.minimum_gas_fee_multiplier != null) {
                data.minimum_gas_fee_multiplier = this.minimum_gas_fee_multiplier;
            }
            if (this.global_max_gas_price != null) {
                data.global_max_gas_price = this.global_max_gas_price;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeUint64(1, this.limit);
            if (this.max_scheduled_calls_per_wallet != 0)
                writer.writeUint64(2, this.max_scheduled_calls_per_wallet);
            if (this.minimum_gas_fee_multiplier.length)
                writer.writeString(3, this.minimum_gas_fee_multiplier);
            if (this.global_max_gas_price.length)
                writer.writeString(4, this.global_max_gas_price);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readUint64();
                        break;
                    case 2:
                        message.max_scheduled_calls_per_wallet = reader.readUint64();
                        break;
                    case 3:
                        message.minimum_gas_fee_multiplier = reader.readString();
                        break;
                    case 4:
                        message.global_max_gas_price = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
}
